// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReasonReact = require("reason-react/src/ReasonReact.js");

var component = ReasonReact.statelessComponent("todoInput");

function str(prim) {
  return prim;
}

var iter = /* record */[/* contents */0];

function inc(i) {
  i[0] = i[0] + 1 | 0;
  return i[0];
}

function make(toParent, parentState, param) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (param) {
              return React.createElement("div", {
                          className: "contentRow"
                        }, "New Todo:", React.createElement("input", {
                              id: "todo-input",
                              placeholder: "Write something to do...",
                              value: parentState[/* todoText */3],
                              onKeyDown: (function (evt) {
                                  if (evt.key === "Enter") {
                                    return Curry._1(toParent, /* AddTodo */Block.__(0, [/* record */[
                                                    /* description */parentState[/* todoText */3],
                                                    /* completed */false,
                                                    /* id */inc(iter)
                                                  ]]));
                                  } else {
                                    return 0;
                                  }
                                }),
                              onChange: (function (evt) {
                                  return Curry._1(toParent, /* UpdateText */Block.__(1, [evt.target.value]));
                                })
                            }));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.component = component;
exports.str = str;
exports.iter = iter;
exports.inc = inc;
exports.make = make;
/* component Not a pure module */
