// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var TodoItem$ReactTemplate = require("./TodoItem.bs.js");
var VerticalSpacer$ReactTemplate = require("./utilComponents/VerticalSpacer.bs.js");

var component = ReasonReact.reducerComponent("todoList");

function str(prim) {
  return prim;
}

function make(_children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (param) {
              var send = param[/* send */3];
              var state = param[/* state */1];
              var iter = /* record */[/* contents */0];
              var inc = function (i) {
                i[0] = i[0] + 1 | 0;
                return i[0];
              };
              var match = List.length(state[/* todos */2]) < 1;
              return React.createElement("div", {
                          id: "list_component"
                        }, ReasonReact.element(undefined, undefined, VerticalSpacer$ReactTemplate.make("50", /* array */[])), React.createElement("div", {
                              className: "contentRow"
                            }, "New Todo:", React.createElement("input", {
                                  id: "todo-input",
                                  placeholder: "Write something to do...",
                                  value: state[/* todoText */3],
                                  onKeyDown: (function (evt) {
                                      if (evt.key === "Enter") {
                                        return Curry._1(send, /* AddTodo */Block.__(0, [state[/* todoText */3]]));
                                      } else {
                                        return 0;
                                      }
                                    }),
                                  onChange: (function (evt) {
                                      return Curry._1(send, /* UpdateText */Block.__(1, [evt.target.value]));
                                    })
                                })), ReasonReact.element(undefined, undefined, VerticalSpacer$ReactTemplate.make("25", /* array */[])), React.createElement("div", {
                              id: "todo-list"
                            }, match ? "Nothing yet" : $$Array.of_list(List.map((function (todo) {
                                          return ReasonReact.element(String(inc(iter)), undefined, TodoItem$ReactTemplate.make(todo, /* array */[]));
                                        }), state[/* todos */2]))), React.createElement("button", {
                              id: "hide-button"
                            }, "Hide Completed Todos"), React.createElement("div", {
                              id: "todo-count"
                            }, "Todos left: " + String(state[/* count */0])));
            }),
          /* initialState */(function (param) {
              return /* record */[
                      /* count */0,
                      /* showCompleted */true,
                      /* todos : [] */0,
                      /* todoText */""
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                return /* Update */Block.__(0, [/* record */[
                            /* count */state[/* count */0],
                            /* showCompleted */!state[/* showCompleted */1],
                            /* todos */state[/* todos */2],
                            /* todoText */state[/* todoText */3]
                          ]]);
              } else if (action.tag) {
                return /* Update */Block.__(0, [/* record */[
                            /* count */state[/* count */0],
                            /* showCompleted */state[/* showCompleted */1],
                            /* todos */state[/* todos */2],
                            /* todoText */action[0]
                          ]]);
              } else {
                var todoText = action[0];
                var match = todoText.length !== 0;
                return /* Update */Block.__(0, [/* record */[
                            /* count */state[/* count */0] + 1 | 0,
                            /* showCompleted */state[/* showCompleted */1],
                            /* todos */match ? Pervasives.$at(state[/* todos */2], /* :: */[
                                    todoText,
                                    /* [] */0
                                  ]) : state[/* todos */2],
                            /* todoText */""
                          ]]);
              }
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.component = component;
exports.str = str;
exports.make = make;
/* component Not a pure module */
